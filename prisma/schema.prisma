generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// File
model File {
  sum       String   @id
  filename  String
  format    String
  large     String
  thumbnail String
  createdAt DateTime @default(now())

  users  User[]
  medias MediaEntity[]

  @@map("files")
}

// Authentication
enum SubscriptionPlan {
  STANDARD
  PREMIUM
}

model User {
  uuid             String           @id @default(uuid())
  username         String           @unique
  email            String           @unique
  password         String
  avatarRef        String?
  subscriptionPlan SubscriptionPlan @default(STANDARD)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  avatar File? @relation(fields: [avatarRef], references: [sum], onDelete: SetNull)

  authSessions AuthSession[]
  quickTasks   QuickTask[]
  watchlist    Watchlist[]
  mediaStatus  MediaStatus[]

  @@map("users")
}

model AuthSession {
  userUuid  String
  token     String    @default(uuid())
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?

  user User @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@id([userUuid, token])
  @@map("auth_sessions")
}

// Productivity
model QuickTask {
  id          Int       @id @default(autoincrement())
  userUuid    String
  label       String
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  user User @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("quick_tasks")
}

// Home Cinema
enum MediaType {
  MOVIE
  TV_SERIES
}

enum MediaNotation {
  BAD
  GOOD
  VERY_GOOD
}

model MediaEntity {
  id        Int       @id @default(autoincrement())
  type      MediaType
  title     String
  synopsis  String
  posterRef String?
  year      Int
  genders   String[]
  actors    String[]
  duration  Int
  createdAt DateTime  @default(now())

  poster File? @relation(fields: [posterRef], references: [sum], onDelete: SetNull)

  savedBy Watchlist[]
  status  MediaStatus[]

  @@map("media_entities")
}

model Watchlist {
  userUuid  String
  mediaId   Int
  createdAt DateTime @default(now())

  user  User        @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  media MediaEntity @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([userUuid, mediaId])
  @@map("watchlist_relations")
}

model MediaStatus {
  userUuid  String
  mediaId   Int
  note      MediaNotation?
  viewedAt  DateTime?
  createdAt DateTime       @default(now())

  user  User        @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  media MediaEntity @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([userUuid, mediaId])
  @@map("media_status")
}
